import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    static class Orders{
        long arrivalTime;
        long cookingTime;
        long completionTime;
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        
        PriorityQueue<Orders> arrivalQueue = new PriorityQueue<>(T,new Comparator<Orders>(){
            public int compare(Orders o1, Orders o2){
                if(o1.arrivalTime<o2.arrivalTime)
                    return -1;
                else if(o1.arrivalTime>o2.arrivalTime)
                    return 1;
                else 
                    return 0;
            }
        });
        
        
        for(int i=0;i<T;i++){
            Orders o = new Orders();
            o.arrivalTime = in.nextLong();
            o.cookingTime = in.nextLong();
            arrivalQueue.add(o);
        }
        
        
        PriorityQueue<Orders> cookingQueue = new PriorityQueue<>(T,new Comparator<Orders>(){
            public int compare(Orders o1, Orders o2){
                if(o1.cookingTime<o2.cookingTime)
                    return -1;
                else if(o1.cookingTime>o2.cookingTime)
                    return 1;
                else 
                    return 0;
            }
        });
        
        long time = 0;
        Orders cur; //= arrivalQueue.remove();
        //cookingQueue.add(cur);
       // time = cur.arrivalTime;
        long waitingTime = 0;
        
        while(!cookingQueue.isEmpty() || !arrivalQueue.isEmpty()){
            
            if(!arrivalQueue.isEmpty()){
                while(arrivalQueue.peek()!= null && time>=arrivalQueue.peek().arrivalTime){
                    cur = arrivalQueue.remove();
                    //System.out.println("ArrivalQ "+cur.arrivalTime +" "+ cur.cookingTime);
                    cookingQueue.add(cur);
                    
                }
            }
            
            if(!cookingQueue.isEmpty()){
                
                if(time>=cookingQueue.peek().arrivalTime){
                    cur = cookingQueue.remove();
                    time += cur.cookingTime;
                    cur.completionTime = time;
                    //System.out.println("CookingQ "+cur.arrivalTime +" "+ cur.cookingTime+" "+cur.completionTime);
                    waitingTime += (cur.completionTime - cur.arrivalTime);
                    continue;
                    
                }
        }
        time++;           
    }
        System.out.println(waitingTime/T);               
    }
}
